##Import Module - MindKey-Rest.psm1
Add-Type -Path ("C:\Users\yahwazi\OneDrive - KPMG\Desktop\Abacus Medicine\Mindkey files\MindKeyRestException.cs")
Import-Module ("C:\Users\yahwazi\OneDrive - KPMG\Desktop\Abacus Medicine\Mindkey files\MindKey-Rest.psm1") -Force
Import-Module ("C:\Users\yahwazi\OneDrive - KPMG\Desktop\Abacus Medicine\Mindkey files\MindKey-Tools.psm1") -Force

##Connect to the API using the Connect-MindKeyRest method provided by the module:
Connect-MindKeyRest “https://integration.mindkey.com” -CertificateThumbprint 1183BD6221A620E17C4B9CA4B6BC47286A6DD3F3 -CustomerId 107341EE-35F3-46F4-A1EF-1396F1DC267D


##Body
 
$body = @{ 

        columns = " EmployeeID,
Name_FirstName,
Name_MiddleName,
Name_LastName,
Name_FullName,
Address_City,
Address_ZipPostalCode,
Address_CountryRegion,
SocialSecurityNumber,
NationalityID,
Email,
MaritalStatus,
Gender,
BirthDate,
SeniorityDate,
UserId,
ActiveUser,
Active,
JubileeDate,
CreatedDateTime,
ModifiedDateTime,
VersionStamp,
HireDate,
TerminatedDate,
PositionId,
PositionVersion_Title,
PositionVersion_JobId,
PositionVersion_ReportsTo,
LocationId,
OrganizationId,
PositionVersion_EmployeeId,
PositionVersion_ValidFrom,
PositionVersion_ValidTo,
PositionVersion_WorkingHours,
PositionVersion_Frequency,
PositionVersion_Office,
PositionVersion_Dimension1ID,
PositionVersion_LeaveGroupName,
PositionVersion_HireReasonCodeId,
PositionVersion_TerminationReasonCodeId,
PositionVersion_Fte,
PositionVersion_FullTimeWorkingHours,
PositionVersion_WorkingHoursExpected" 
	
} 

#################################################################################################################################
# Get Employees from MindKey and save to xml file
#################################################################################################################################
try
{
    Add-Info ("Fetching Employees")


    # Setup columns (and display method's) to return
    $EmployeeColumnsAll =   "EmployeeID,
Name_FirstName,
Name_MiddleName,
Name_LastName,
Name_FullName,
Address_City,
Address_ZipPostalCode,
Address_CountryRegion,
SocialSecurityNumber,
NationalityID,
Email,
MaritalStatus,
Gender,
BirthDate,
SeniorityDate,
UserId,
ActiveUser,
Active,
JubileeDate,
CreatedDateTime,
ModifiedDateTime,
VersionStamp,
HireDate,
TerminatedDate,
PositionId,
PositionVersion_Title,
PositionVersion_JobId,
PositionVersion_ReportsTo,
LocationId,
OrganizationId"


    $positionColumnsAll =   "PositionVersion_EmployeeId,
PositionVersion_ValidFrom,
PositionVersion_ValidTo,
PositionVersion_WorkingHours,
PositionVersion_Frequency,
PositionVersion_Office,
PositionVersion_Dimension1ID,
PositionVersion_LeaveGroupName,
PositionVersion_HireReasonCodeId,
PositionVersion_TerminationReasonCodeId,
PositionVersion_Fte,
PositionVersion_FullTimeWorkingHours,
PositionVersion_WorkingHoursExpected" 


    # Get Employees terminated in position "Fuldtid" within the last two years
    $now = Get-Date
    $terminatedAfterDate = "$($now.AddYears($(-2)).ToString("yyyy-MM-dd"))T00:00:00"


    $bodyTerminatedInnerJoin = @{
	    columns = $EmployeeColumnsAll  
	    positionMode = "TerminatedInnerJoin"
	    positionColumns = $positionColumnsAll 
        customSearchCondition = @(@{
            condition     = "TransDate";
            value         = $terminatedAfterDate;
            onlyParameter = $true
      })
    }
    
         
    $EmployeesTerminatedInnerJoinList = (Invoke-MindKeyRestPost "employees/find" -InputObject $bodyTerminatedInnerJoin) | Where-Object {$_.PositionVersion_EmploymentCategoryName -eq "Fuldtid"} | Sort-Object {$_.Name_FullName}


    # add terminated to totalList
    foreach($EmployeesTerminatedInnerJoin in $EmployeesTerminatedInnerJoinList) 
    { 
        $EmployeeExportTarget = New-Object MindKey.Service.Target.EmployeeAllFieldsTarget


        WriteEmployeeTarget -employee $EmployeesTerminatedInnerJoin


        $EmployeeExportList += $EmployeeExportTarget


    }
    
    

    # Get Employees current position "Fuldtid"
    $bodyCurrentInnerJoin = @{
	    columns = $columns  
	    positionMode = "CurrentInnerJoin"
	    positionColumns = $positionColumnsAll 
    }


    $EmployeesCurrentInnerJoinList = (Invoke-MindKeyRestPost "employees/find" -InputObject $bodyCurrentInnerJoin) | Where-Object {$_.PositionVersion_EmploymentCategoryName -eq "Fuldtid"}


    # add current to totalList
    if ($EmployeesCurrentInnerJoinList)
    {
        $Employees += $EmployeesCurrentInnerJoinList 
    }
    
    



    # Get Employees in future position "Fuldtid" from the last two years
    $futureDate = "$($now.AddYears($(-2)).ToString("yyyy-MM-dd"))T00:00:00"


    $bodyFurureInnerJoin = @{
	    columns = $columns  
	    positionMode = "FutureInnerJoin"
	    positionColumns = $positionColumnsAll 
        customSearchCondition =  @(@{ condition = "TransDate"; value = $futureDate; onlyParameter = $true}) #Future Employments from this date
    }

    $EmployeesFutureInnerJoinList = (Invoke-MindKeyRestPost "employees/find" -InputObject $bodyFurureInnerJoin) | Where-Object {$_.PositionVersion_EmploymentCategoryName -eq "Fuldtid"}
    

    # add current to totalList
    if ($EmployeesFutureInnerJoinList)
    {
        $Employees += $EmployeesFutureInnerJoinList 
    }


    # Format and save Csv file
    Add-Info ("Exporting Csv File")
    $Employees | Export-Csv -Path "C:\Users\yahwazi\OneDrive - KPMG\Desktop\Abacus Medicine\test2.csv" -NoTypeInformation -Delimiter ";" 


}
catch
{
    
}

